let workers=[],isRunning=!1,currentMode=null,countdownInterval=null,totalProgress=0;const TOTAL_TIME=40,benchmarkStandards=[{cpu:"Intel 13900K",sha256:11460620,nitro_sha256:5991383,default_sha256:363059,normal_sha256:52150},{cpu:"AMD 9950X",sha256:14064123,nitro_sha256:4843174,default_sha256:386847,normal_sha256:59680},{cpu:"EPYC 9554",sha256:20730341,nitro_sha256:7561353,default_sha256:306811,normal_sha256:60098},{cpu:"Intel 12450H(Laptop)",sha256:3168796,nitro_sha256:1478630,default_sha256:288064,normal_sha256:54009},{cpu:"AMD 7950X",sha256:10569744,nitro_sha256:3687914,default_sha256:525211,normal_sha256:52406},{cpu:"Intel 14700K",sha256:10959375,nitro_sha256:5286109,default_sha256:448335,normal_sha256:56371},{cpu:"AMD 7950X3D",sha256:12001392,nitro_sha256:5566958,default_sha256:334873,normal_sha256:52660},{cpu:"iPhone 15 PRO MAX",sha256:1347799,nitro_sha256:513679,default_sha256:85017,normal_sha256:74231}],input="53-6a6628c0bad070cee245b0e8a7861c55b25df96beecde8048f2b83632b61fa5d-1732207722948-010203",statsDisplay=document.querySelector("#hashrate"),resultsDisplay=document.querySelector("#results"),toggleButton=document.querySelector("#startButton"),workerCount=Math.min(96,navigator.hardwareConcurrency||4),results={sha256:0,nitro_sha256:0,default_sha256:0,normal_sha256:0};function getModeName(e){return{sha256:"Nitrocore",nitro_sha256:"Supersonic",default_sha256:"Turbo",normal_sha256:"Normal"}[e]||e}function findPosition(e,t){return[...benchmarkStandards,{cpu:"Your Result",[t]:e}].sort(((e,s)=>s[t]-e[t])).findIndex((e=>"Your Result"===e.cpu))}function updateProgress(e,t){const s=["sha256","nitro_sha256","default_sha256","normal_sha256"].indexOf(e);totalProgress=(10*s+(10-t))/40*100;const n=document.querySelector(".progress-bar"),a=document.querySelector(".progress-text");n.style.width=`${totalProgress}%`,a.textContent="Processing "+getModeName(e)+" mode..."}async function runBenchmark(e,t){return new Promise((s=>{currentMode=e;let n=new Array(t.length).fill(0),a=0,r=10;countdownInterval&&clearInterval(countdownInterval),updateProgress(e,r),countdownInterval=setInterval((()=>{r--,updateProgress(e,r),r<=0&&clearInterval(countdownInterval)}),1e3),t.forEach(((r,o)=>{r.onmessage=function(r){if("stats"===r.data.type&&r.data.mode===e&&(n[o]=r.data.hashes,a++,console.log(`${getModeName(e)} - Worker ${o+1}: ${r.data.hashes/10} h/s`),a===t.length)){clearInterval(countdownInterval);const t=n.reduce(((e,t)=>e+t),0);results[e]=Math.floor(t/10),console.log(`${getModeName(e)} - Total: ${results[e]} h/s`),s()}},r.postMessage({type:e})}))}))}async function startFullBenchmark(){isRunning=!0,toggleButton.disabled=!0,totalProgress=0;const e=document.querySelector(".progress-bar"),t=document.querySelector(".progress-text");e.style.width="0%",t.textContent="",results.sha256=0,results.nitro_sha256=0,results.default_sha256=0,results.normal_sha256=0,resultsDisplay.innerHTML="",stopBenchmark(),workers=[];for(let e=0;e<workerCount;e++){const e=new Worker("/files/js/worker.js");e.onerror=function(e){console.error("Worker error:",e)},e.postMessage({input}),workers.push(e)}await runBenchmark("sha256",workers),await runBenchmark("nitro_sha256",workers),await runBenchmark("default_sha256",workers),stopBenchmark(),workers=[new Worker("worker.js")],workers[0].postMessage({input}),await runBenchmark("normal_sha256",workers),displayResults(),stopBenchmark(),toggleButton.disabled=!1,t.textContent="Completed"}function displayResults(){const e=Math.max(results.sha256,results.nitro_sha256,results.default_sha256,results.normal_sha256),t={sha256:"sonic-bar",nitro_sha256:"nitro-bar",default_sha256:"turbo-bar",normal_sha256:"normal-bar"},s=`\n        <h3>Benchmark Results:</h3>\n        <div class="results-container">\n            ${Object.entries({Nitrocore:"sha256",Supersonic:"nitro_sha256",Turbo:"default_sha256",Normal:"normal_sha256"}).map((([s,n])=>`\n                <div class="result-row">\n                    <div class="result-label">${s}:</div>\n                    <div class="result-bar-container">\n                        <div class="result-bar ${t[n]}"\n                             style="width: ${results[n]/e*100}%">\n                        </div>\n                        <div class="result-value">\n                            ${results[n].toLocaleString()} h/s\n                            <button class="compare-btn" data-algorithm="${n}">Compare</button>\n                        </div>\n                    </div>\n                    <div class="comparison-container" id="${n}-comparison" style="display: none;"></div>\n                </div>\n            `)).join("")}\n        </div>\n    `;resultsDisplay.innerHTML=s,document.querySelectorAll(".compare-btn").forEach((e=>{e.addEventListener("click",(e=>{const t=e.target.dataset.algorithm,s=results[t],n=(findPosition(s,t),document.getElementById(`${t}-comparison`));if("none"===n.style.display){const a=[...benchmarkStandards,{cpu:"Your Result",[t]:s}].map((e=>e[t])),r=Math.max(...a),o=`\n                    <div class="comparison-list">\n                        ${[...benchmarkStandards,{cpu:"Your Result",[t]:s}].sort(((e,s)=>s[t]-e[t])).map(((e,s)=>`\n                                <div class="comparison-item ${"Your Result"===e.cpu?"highlight":""}">\n                                    <div class="comparison-content">\n                                        <span class="cpu-name">${e.cpu}</span>\n                                        <div class="comparison-bar-container">\n                                            <div class="comparison-bar ${"Your Result"===e.cpu?t+"-compare-bar":"standard-compare-bar"}"\n                                                 style="width: ${e[t]/r*100}%">\n                                            </div>\n                                            <span class="comparison-score">${e[t].toLocaleString()} h/s</span>\n                                        </div>\n                                    </div>\n                                </div>\n                            `)).join("")}\n                    </div>\n                `;n.innerHTML=o,n.style.display="block",e.target.textContent="Hide"}else n.style.display="none",e.target.textContent="Compare"}))}))}function stopBenchmark(){countdownInterval&&clearInterval(countdownInterval),isRunning=!1,workers.forEach((e=>e.terminate())),workers=[]}document.addEventListener("DOMContentLoaded",(()=>{toggleButton.addEventListener("click",(()=>{isRunning||startFullBenchmark()}))}));